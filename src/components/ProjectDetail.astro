---
import { Icon } from 'astro-icon/components';
import ErrorBoundary from './ErrorBoundary.astro';
import { sanityFetch, queries } from '@/lib/sanity';
import { safeAsync, fallbackData } from '@/utils/errorHandling';
import { getImageUrl } from '@/lib/imageUtils';
import type { Project } from '@/types/sanity';
import { PROJECT_STATUS } from '@/types/sanity';

// Accept project slug as props
interface Props {
  slug: string;
}

const { slug } = Astro.props;

// Fetch project with error handling
const project: Project | null = await safeAsync(
  () => sanityFetch<Project>(queries.projectBySlug, { slug }),
  null
);

if (!project) {
  return new Response(null, { status: 404 });
}


// Helper function to get image URL from Sanity
function getImageUrl(imageRef: string): string {
  return `https://cdn.sanity.io/images/9bdbnjzy/production/${imageRef.replace('image-', '').replace('-jpg', '.jpg').replace('-png', '.png').replace('-webp', '.webp')}`;
}

// Get all available images for carousel
const images = [
  project.image1 && {
    url: getImageUrl(project.image1.asset._ref),
    alt: project.image1.alt || `${project.title} - Image 1`
  },
  project.image2 && {
    url: getImageUrl(project.image2.asset._ref),
    alt: project.image2.alt || `${project.title} - Image 2`
  },
  project.image3 && {
    url: getImageUrl(project.image3.asset._ref),
    alt: project.image3.alt || `${project.title} - Image 3`
  }
].filter(Boolean);

// Status configuration from types
const statusConfig = PROJECT_STATUS[project.status];
---

<div class="w-full max-w-6xl mx-auto p-4 space-y-8">
  <!-- Header Section -->
  <div class="bg-mochasurface border border-mochaborder rounded-4xl p-6 md:p-8">
    <div class="flex flex-col md:flex-row md:justify-between md:items-start gap-4 mb-6">
      <div class="flex flex-col">
        <div class="flex flex-col md:flex-row items-center mb-4 gap-4">
          <h1 class="text-xl md:text-4xl font-bold text-mochawhite">{project.title}</h1>
          <div class="flex flex-row items-center gap-4">
            <span class={`px-3 py-1 rounded-md text-sm border ${statusConfig.className}`}>
            {statusConfig.label}
            </span>
            <span class="text-sm text-mochawhite/50">{project.year}</span>
          </div>

        </div>
          <p class="text-md md:text-lg text-mochawhite/80 mb-4">{project.description}</p>

      </div>
    </div>
      <div class="flex flex-col gap-2">
        
    </div>

    <!-- Technologies -->
    <div class="flex flex-wrap items-center justify-center md:justify-start gap-2 mb-6">
      {project.technologies.map((tech) => (
        <span class="px-3 py-1 bg-mochasurface border border-mochaborder rounded-md text-mochawhite text-sm">
          {tech}
        </span>
      ))}
    </div>

    <!-- Action Links -->
    {(project.githubUrl || project.liveUrl) && (
      <div class="flex items-center justify-center md:justify-start  flex-wrap gap-4">
        {project.githubUrl && (
          <a href={project.githubUrl} target="_blank" rel="noopener noreferrer"
             class="flex items-center gap-2 px-4 py-2 bg-mochasurface hover:bg-mochasurfacelight/50 border border-mochaborder rounded-lg text-mochawhite transition-colors">
            <Icon name="mdi:github" width="20" height="20" />
            Code source
          </a>
        )}
        {project.liveUrl && (
          <a href={project.liveUrl} target="_blank" rel="noopener noreferrer"
             class="flex items-center gap-2 px-4 py-2 bg-indigo-500 hover:bg-indigo-600 border border-indigo-500 rounded-lg text-white transition-colors">
            <Icon name="mdi:open-in-new" width="20" height="20" />
            Voir le projet
          </a>
        )}
      </div>
    )}
  </div>

  <!-- Image Carousel -->
  {images.length > 0 && (
    <div class="carousel-section ">
      <div class="relative">
        <!-- Carousel Container -->
        <div class="carousel-container overflow-hidden rounded-2xl bg-mochablack/50">
          <div class="carousel-track flex transition-transform duration-300 ease-in-out" id="carousel-track">
            {images.map((image, index) => (
              image && (
                <div class="carousel-slide w-full flex-shrink-0 relative">
                  <div class="aspect-video w-full">
                    <img src={image.url} alt={image.alt}
                         class="w-full h-full object-cover rounded-xl"
                         loading="lazy" />
                  </div>
                </div>
              )
            ))}
          </div>
        </div>

        <!-- Navigation Arrows -->
        {images.length > 1 && (
          <>
            <button class="carousel-prev absolute left-2 md:left-4 top-1/2 transform -translate-y-1/2 bg-mochasurface/90 hover:bg-mochasurface border border-mochaborder rounded-full p-2 md:p-3 text-mochawhite transition-all duration-200 backdrop-blur-sm shadow-lg z-10"
                    id="carousel-prev"
                    aria-label="Image précédente">
              <Icon name="mdi:chevron-left" class="w-4 h-4 md:w-6 md:h-6" />
            </button>
            <button class="carousel-next absolute right-2 md:right-4 top-1/2 transform -translate-y-1/2 bg-mochasurface/90 hover:bg-mochasurface border border-mochaborder rounded-full p-2 md:p-3 text-mochawhite transition-all duration-200 backdrop-blur-sm shadow-lg z-10"
                    id="carousel-next"
                    aria-label="Image suivante">
              <Icon name="mdi:chevron-right" class="w-4 h-4 md:w-6 md:h-6" />
            </button>
          </>
        )}

        <!-- Navigation Dots -->
        {images.length > 1 && (
          <div class="flex justify-center gap-2 mt-4 md:mt-6">
            {images.map((_, index) => (
              <button class={`carousel-dot w-2 h-2 md:w-3 md:h-3 rounded-full border border-mochaborder transition-all duration-200 ${
                index === 0 ? 'bg-indigo-400 scale-110' : 'bg-mochasurface hover:bg-mochasurfacelight hover:scale-105'
              }`}
              data-slide={index}
              aria-label={`Aller à l'image ${index + 1}`}>
              </button>
            ))}
          </div>
        )}

        <!-- Image Counter -->
        {images.length > 1 && (
          <div class="absolute top-2 right-2 md:top-4 md:right-4 bg-mochablack/60 text-mochawhite px-2 py-1 md:px-3 md:py-1 rounded-full text-xs md:text-sm backdrop-blur-sm"
               id="image-counter">
            1 / {images.length}
          </div>
        )}
      </div>
    </div>
  )}

  <!-- Features Section -->
  {project.features && project.features.length > 0 && (
    <div class="my-8">
      <div class="mb-6 flex flex-col gap-2">
        <h2 class="text-xl md:text-2xl font-bold text-mochawhite text-center">Fonctionnalités principales</h2>
        <div class="w-16 h-0.5 bg-indigo-400 mx-auto"></div>
      </div>
      

      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {project.features.map((feature) => (
          <div class="bg-mochasurface border border-mochaborder rounded-2xl p-6 hover:bg-mochasurfacelight/50 transition-colors">
            {feature.image && (
              <div class="w-full mb-4">
                <img src={getImageUrl(feature.image.asset._ref)} alt={feature.name}
                     class="w-60 h-60 lg:w-80 lg:h-80 mx-auto  object-cover rounded-lg" />
              </div>
            )}
            <h3 class="text-lg font-semibold text-mochawhite mb-2">{feature.name}</h3>
            <p class="text-mochawhite/70 text-sm">{feature.description}</p>
          </div>
        ))}
      </div>
    </div>
  )}

  <!-- Challenges & Solutions Section -->
  {project.challenges && project.challenges.length > 0 && (
    <div class="my-8" >
      <div class="mb-6 flex flex-col gap-2">
        <h2 class="text-xl md:text-2xl font-bold text-mochawhite text-center">Défis & Solutions</h2>
        <div class="w-16 h-0.5 bg-indigo-400 mx-auto"></div>
      </div>

      <div class="space-y-6">
        {project.challenges.map((challenge, index) => (
          <div class="flex flex-col md:flex-row items-center w-full gap-6">
            <!-- Challenge Card -->
            <div class="bg-red-500/10 border w-full border-red-500/30 rounded-2xl p-6">
              <div class="flex items-center gap-2 mb-3">
                <Icon name="mdi:alert-circle" width="20" height="20" class="text-red-400" />
                <h3 class="text-lg font-semibold text-red-300">Défi</h3>
              </div>
              <h4 class="font-medium text-mochawhite mb-2">{challenge.challengeName}</h4>
              <p class="text-mochawhite/70 text-sm">{challenge.challengeDescription}</p>
            </div>

            <div>

              <Icon name="ep:bottom" width="32" height="32" class="text-mochawhite/50 md:hidden" />
              <Icon  name="ep:right" width="32" height="32" class="text-mochawhite/50 hidden md:block" />
            </div>

            <!-- Solution Card -->
            <div class="bg-green-500/10 w-full border  border-green-500/30 rounded-2xl p-6">
              <div class="flex items-center gap-2 mb-3">
                <Icon name="mdi:check-circle" width="20" height="20" class="text-green-400" />
                <h3 class="text-lg font-semibold text-green-300">Solution</h3>
              </div>
              <h4 class="font-medium text-mochawhite mb-2">{challenge.solutionName}</h4>
              <p class="text-mochawhite/70 text-sm">{challenge.solutionDescription}</p>
            </div>
          </div>
        ))}
      </div>
    </div>
  )}
</div>

<script>
  // Carousel functionality with touch support
  const track = document.getElementById('carousel-track');
  const prevButton = document.getElementById('carousel-prev');
  const nextButton = document.getElementById('carousel-next');
  const dots = document.querySelectorAll('.carousel-dot');
  const counter = document.getElementById('image-counter');
  const carouselContainer = document.querySelector('.carousel-container');

  if (track && dots.length > 1) {
    let currentSlide = 0;
    const totalSlides = dots.length;
    let isTransitioning = false;

    // Touch/swipe support
    let touchStartX = 0;
    let touchEndX = 0;
    let isDragging = false;
    const minSwipeDistance = 50;

    function updateCarousel(animate = true) {
      if (isTransitioning) return;

      isTransitioning = true;
      const translateX = -currentSlide * 100;

      if (track) {
        if (animate) {
          track.style.transition = 'transform 0.3s ease-in-out';
        } else {
          track.style.transition = 'none';
        }
        track.style.transform = `translateX(${translateX}%)`;
      }

      // Update dots
      dots.forEach((dot, index) => {
        if (index === currentSlide) {
          dot.classList.remove('bg-mochasurface', 'hover:bg-mochasurfacelight', 'scale-100');
          dot.classList.add('bg-indigo-400', 'scale-110');
        } else {
          dot.classList.remove('bg-indigo-400', 'scale-110');
          dot.classList.add('bg-mochasurface', 'hover:bg-mochasurfacelight', 'scale-100');
        }
      });

      // Update counter
      if (counter) {
        counter.textContent = `${currentSlide + 1} / ${totalSlides}`;
      }

      setTimeout(() => {
        isTransitioning = false;
      }, 300);
    }

    function nextSlide() {
      if (isTransitioning) return;
      currentSlide = (currentSlide + 1) % totalSlides;
      updateCarousel();
    }

    function prevSlide() {
      if (isTransitioning) return;
      currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
      updateCarousel();
    }

    function goToSlide(index: number) {
      if (isTransitioning || index === currentSlide) return;
      currentSlide = index;
      updateCarousel();
    }

    // Touch event handlers
    function handleTouchStart(e : TouchEvent) {
      touchStartX = e.touches[0].clientX;
      isDragging = true;
      if (track) {
        track.style.transition = 'none';
      }
    }

    function handleTouchMove(e: TouchEvent) {
      if (!isDragging) return;

      touchEndX = e.touches[0].clientX;
      const diffX = touchStartX - touchEndX;
      const currentTranslate = -currentSlide * 100;
      const dragPercent = carouselContainer ? (diffX / (carouselContainer.offsetWidth) * 100) : 0;

      if (track) {
        track.style.transform = `translateX(${currentTranslate - dragPercent}%)`;
      }
    }

    function handleTouchEnd() {
      if (!isDragging) return;

      isDragging = false;
      const diffX = touchStartX - touchEndX;

      if (Math.abs(diffX) > minSwipeDistance) {
        if (diffX > 0) {
          nextSlide();
        } else {
          prevSlide();
        }
      } else {
        updateCarousel();
      }
    }

    // Event listeners
    nextButton?.addEventListener('click', nextSlide);
    prevButton?.addEventListener('click', prevSlide);

    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => goToSlide(index));
    });

    // Touch events
    if (carouselContainer) {
      carouselContainer.addEventListener('touchstart', handleTouchStart, { passive: true });
      carouselContainer.addEventListener('touchmove', handleTouchMove, { passive: true });
      carouselContainer.addEventListener('touchend', handleTouchEnd, { passive: true });
    }

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') prevSlide();
      if (e.key === 'ArrowRight') nextSlide();
    });

    // Auto-play (optional - can be enabled/disabled)
    let autoPlayInterval: ReturnType<typeof setInterval> | undefined;
    const autoPlayDelay = 5000; // 5 seconds

    function startAutoPlay() {
      autoPlayInterval = setInterval(() => {
        if (!isDragging && !isTransitioning) {
          nextSlide();
        }
      }, autoPlayDelay);
    }

    function stopAutoPlay() {
      if (autoPlayInterval) {
        clearInterval(autoPlayInterval);
      }
    }

    // Pause auto-play on hover/focus
    if (carouselContainer) {
      carouselContainer.addEventListener('mouseenter', stopAutoPlay);
      carouselContainer.addEventListener('mouseleave', startAutoPlay);
      carouselContainer.addEventListener('focusin', stopAutoPlay);
      carouselContainer.addEventListener('focusout', startAutoPlay);
    }

    // Initialize
    updateCarousel(false);
    // Uncomment the line below to enable auto-play
    // startAutoPlay();
  }
</script>

<style>
  .carousel-slide {
    min-width: 100%;
  }

  .carousel-track {
    will-change: transform;
  }

  .carousel-container {
    touch-action: pan-y;
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }

  .carousel-container:focus-within {
    outline: 2px solid #6366f1;
    outline-offset: 2px;
  }

  .carousel-prev:focus,
  .carousel-next:focus,
  .carousel-dot:focus {
    outline: 2px solid #6366f1;
    outline-offset: 2px;
  }

  /* Responsive image scaling */
  @media (max-width: 640px) {
    .aspect-video {
      aspect-ratio: 4/3;
    }
  }

  @media (min-width: 641px) and (max-width: 1024px) {
    .aspect-video {
      aspect-ratio: 16/10;
    }
  }

  @media (min-width: 1025px) {
    .aspect-video {
      aspect-ratio: 16/9;
    }
  }

  /* Improved button hover states */
  .carousel-prev:hover,
  .carousel-next:hover {
    transform: translateY(-50%) scale(1.05);
  }

  .carousel-dot:hover {
    transform: scale(1.2);
  }

  /* Loading state animation */
  .carousel-slide img {
    transition: opacity 0.3s ease-in-out;
  }

  .carousel-slide img[loading="lazy"] {
    opacity: 0;
    animation: fadeIn 0.3s ease-in-out forwards;
  }

  @keyframes fadeIn {
    to {
      opacity: 1;
    }
  }

  /* Accessibility improvements */
  @media (prefers-reduced-motion: reduce) {
    .carousel-track,
    .carousel-prev,
    .carousel-next,
    .carousel-dot,
    .carousel-slide img {
      transition: none !important;
      animation: none !important;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .carousel-prev,
    .carousel-next,
    .carousel-dot {
      border: 2px solid currentColor;
      background: white;
      color: black;
    }

    .carousel-dot.bg-indigo-400 {
      background: black;
      color: white;
    }
  }
</style>