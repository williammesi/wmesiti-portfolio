---
import { createClient } from "@sanity/client";

const { id } = Astro.props;

// Initialize Sanity client
const client = createClient({
  projectId: "9bdbnjzy",
  dataset: "production",
  useCdn: false,
  apiVersion: "2023-01-01",
});

// Interfaces
interface Skill {
  name: string;
  colorScheme: string;
  iconUrl?: string;
  icon?: string;
}

interface SkillCategory {
  _id: string;
  name: string;
  slug: {
    current: string;
  };
  description?: string;
  skills: Skill[];
  order?: number;
}

// Fetch skill categories from Sanity
const skillCategories: SkillCategory[] = await client.fetch(`
  *[_type == "skillCategory"] | order(coalesce(order, 999) asc) {
    _id,
    name,
    slug,
    description,
    skills[] {
      name,
      colorScheme,
      iconUrl,
      "icon": icon.asset->url
    },
    order
  }
`);

// Color scheme mapping function
function getColorClasses(colorScheme: string) {
  const colorMap = {
    indigo: {
      hoverClasses: "hover:from-indigo-500/20 hover:to-violet-600/20",
      dotGradient: "from-indigo-500 to-violet-600"
    },
    silver: {
      hoverClasses: "hover:from-gray-400/20 hover:to-gray-800/20",
      dotGradient: "from-gray-400 to-gray-800"
    },
    blue: {
      hoverClasses: "hover:from-blue-500/20 hover:to-cyan-600/20",
      dotGradient: "from-blue-500 to-cyan-600"
    },
    green: {
      hoverClasses: "hover:from-green-500/20 hover:to-emerald-600/20",
      dotGradient: "from-green-500 to-emerald-600"
    },
    orange: {
      hoverClasses: "hover:from-orange-500/20 hover:to-red-600/20",
      dotGradient: "from-orange-500 to-red-600"
    },
    pink: {
      hoverClasses: "hover:from-pink-500/20 hover:to-purple-600/20",
      dotGradient: "from-pink-500 to-purple-600"
    },
    yellow: {
      hoverClasses: "hover:from-yellow-500/20 hover:to-amber-600/20",
      dotGradient: "from-yellow-500 to-amber-600"
    }
  };

  return colorMap[colorScheme] || colorMap.indigo;
}
---

<div id={id} class="skills-tabs flex flex-col lg:grid lg:grid-cols-5 gap-8">
    <!-- Enhanced Tab Navigation -->
    <div class="tabs-header flex flex-col lg:col-span-1 gap-3">
        <div>
            <h2 class="text-xl md:text-2xl font-bold text-mochawhite mb-2 text-center ">Comp√©tences</h2>
            <div class="w-16 h-0.5 bg-indigo-400 mx-auto"></div>
        </div>

        <div class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-1 gap-3 my-auto lg:my-0">
        {skillCategories.map((category, index) => (
            <button
                class={`tab-button group relative px-6 py-4 text-mochawhite rounded-xl border border-mochaborder transition-all duration-300 text-left ${
                    index === 0
                        ? 'active bg-indigo-500 hover:bg-indigo-600 hover:scale-105 shadow-lg'
                        : 'bg-mochasurface backdrop-blur-sm hover:bg-mochasurfacelight hover:scale-105'
                }`}
                data-tab={category.slug.current}
            >
                <div class="flex items-center gap-3">
                    <div class={`w-2 h-2 rounded-full ${
                        index === 0 ? 'bg-white' : 'bg-mochawhite/60'
                    }`}></div>
                    <span class="font-medium">{category.name}</span>
                </div>
            </button>
        ))}
        </div>
    </div>

    <!-- Enhanced Tab Content -->
    <div class="tabs-body lg:col-span-4 bg-mochasurface backdrop-blur-sm rounded-4xl border border-mochaborder p-8 min-h-[400px] flex-1">
        {skillCategories.map((category, index) => (
            <div class={`tab-panel ${index === 0 ? 'active fade-in' : 'hidden'}`} data-panel={category.slug.current}>
                <div class="mb-6">
                    <h4 class="text-2xl font-bold text-mochawhite mb-2">{category.name}</h4>
                    {category.description && (
                        <p class="text-mochawhite/70 text-lg">{category.description}</p>
                    )}
                </div>
                <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {category.skills.map((skill) => {
                        const colors = getColorClasses(skill.colorScheme);
                        return (
                            <div class={`tech-card group relative bg-gradient-to-br from-mochasurface to-mochasurfacelight ${colors.hoverClasses} border border-mochaborder rounded-2xl p-6 transition-all duration-300 cursor-pointer hover:scale-105 hover:shadow-2xl`}>
                                {(skill.icon || skill.iconUrl) && (
                                    <img
                                        src={skill.icon || skill.iconUrl}
                                        alt={skill.name}
                                        class="w-12 h-12 mx-auto mb-3"
                                    />
                                )}
                                <h5 class="text-center text-mochawhite font-medium">{skill.name}</h5>
                                <div class={`absolute -top-2 -right-2 w-4 h-4 bg-gradient-to-r ${colors.dotGradient} rounded-full opacity-0 group-hover:opacity-100 transition-opacity`}></div>
                            </div>
                        );
                    })}
                </div>
            </div>
        ))}
    </div>
</div>

<style>
    .fade-in {
        animation: fadeIn 0.3s ease-in-out;
    }
    
    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .tech-card:hover img {
        animation: pulse 0.6s ease-in-out;
    }

    @keyframes pulse {
        0%, 100% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.1);
        }
    }
</style>

<script>
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabPanels = document.querySelectorAll('.tab-panel');

    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            const targetTab = (button as HTMLButtonElement).dataset.tab;

            // Remove active states
            tabButtons.forEach(btn => {
                btn.classList.remove('active');
                btn.classList.remove('bg-indigo-500');
                btn.classList.add('bg-mochasurface', 'backdrop-blur-sm', 'hover:bg-mochasurfacelight', 'hover:scale-105');
                
                // Reset dot color
                const dot = btn.querySelector('.w-2.h-2');
                if (dot) {
                    dot.classList.remove('bg-white');
                    dot.classList.add('bg-mochawhite/60');
                }
            });

            // Hide all panels
            tabPanels.forEach(panel => {
                panel.classList.add('hidden');
                panel.classList.remove('active', 'fade-in');
            });

            // Activate clicked button
            button.classList.add('active');
            button.classList.remove('bg-mochasurface', 'backdrop-blur-sm', 'hover:bg-mochasurfacelight', 'hover:scale-105');
            button.classList.add('bg-indigo-500', 'hover:bg-indigo-600', 'hover:scale-105');
            
            // Update dot color
            const activeDot = button.querySelector('.w-2.h-2');
            if (activeDot) {
                activeDot.classList.remove('bg-mochawhite/60');
                activeDot.classList.add('bg-white');
            }

            // Show target panel with animation
            const targetPanel = document.querySelector(`[data-panel="${targetTab}"]`);
            if (targetPanel) {
                targetPanel.classList.remove('hidden');
                targetPanel.classList.add('active', 'fade-in');
            }
        });
    });
</script>